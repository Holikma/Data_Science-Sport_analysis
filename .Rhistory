suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(patchwork)))
dat <- merge(covid, air_quality, all= TRUE)
dat$Timestamp <- as.Date(with(dat, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
dat <- select(dat, c(Timestamp, Confirmed, priemer))
plot(dat$Timestamp, dat$priemer, type="l", col="lightblue", xlab="", ylab="", lwd=2)
par(new=TRUE)
plot(dat$Timestamp, dat$Confirmed, type="l", col="orange", yaxt = "n",xlab="Timestamp", ylab="Cases", lwd=2)
axis(side=4)
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "blue", yaxt="n")
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "darkgreen", yaxt = "n")
title("Correlation between cases and polution")
legend("topleft", legend=c("Polution in India", "Confirmed cases"), col=c("blue", "orange"), lty=1)
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(patchwork)))
dat <- merge(covid, air_quality, all= TRUE)
dat$Timestamp <- as.Date(with(dat, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
dat <- select(dat, c(Timestamp, Confirmed, priemer))
plot(dat$Timestamp, dat$priemer, type="l", col="lightblue", xlab="", ylab="", lwd=2)
par(new=TRUE)
plot(dat$Timestamp, dat$Confirmed, type="l", col="orange", yaxt = "n",xlab="Timestamp", ylab="Cases", lwd=2)
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "blue", yaxt="n")
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "darkgreen", yaxt = "n")
axis(side=4)
title("Correlation between cases and polution")
legend("top", legend=c("Polution in India", "Confirmed cases"), col=c("lightblue", "orange"), lty=1)
mod = lm(Confirmed ~ Timestamp, data = covid)
grid1 <- covid %>%
modelr::data_grid(Timestamp, Confirmed) %>%
modelr::add_predictions(mod)
plot(covid$Timestamp, covid$Confirmed, type="h", xlab="", ylab="",col = "orange")
par(new=TRUE)
plot(grid1$Timestamp, grid1$pred, type="l", xlab="", ylab="", yaxt = "n", col = "blue")
axis(side=4)
legend("topleft", legend=c("Covid cases", "prediction"), col=c("orange","blue"), lty=1)
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(patchwork)))
dat <- merge(covid, air_quality, all= TRUE)
dat$Timestamp <- as.Date(with(dat, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
dat <- select(dat, c(Timestamp, Confirmed, priemer))
plot(dat$Timestamp, dat$priemer, type="l", col="lightblue", xlab="", ylab="", lwd=2)
par(new=TRUE)
plot(dat$Timestamp, dat$Confirmed, type="l", col="orange", yaxt = "n",xlab="Timestamp", ylab="Cases", lwd=2)
par(new=TRUE)
plot(grid1$Timestamp, grid1$pred, type="l", xlab="", ylab="", yaxt = "n", col = "blue", yaxt="n")
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "darkgreen", yaxt = "n")
axis(side=4)
title("Correlation between cases and polution")
legend("top", legend=c("Polution in India", "Confirmed cases"), col=c("lightblue", "orange"), lty=1)
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(patchwork)))
dat <- merge(covid, air_quality, all= TRUE)
dat$Timestamp <- as.Date(with(dat, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
dat <- select(dat, c(Timestamp, Confirmed, priemer))
plot(dat$Timestamp, dat$priemer, type="l", col="lightblue", xlab="", ylab="", lwd=2)
par(new=TRUE)
plot(dat$Timestamp, dat$Confirmed, type="l", col="orange", yaxt = "n",xlab="Timestamp", ylab="Cases", lwd=2)
par(new=TRUE)
plot(grid1$Timestamp[Timestamp>= "2020-01-31"], grid1$pred, type="l", xlab="", ylab="", yaxt = "n", col = "blue", yaxt="n")
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(patchwork)))
dat <- merge(covid, air_quality, all= TRUE)
dat$Timestamp <- as.Date(with(dat, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
dat <- select(dat, c(Timestamp, Confirmed, priemer))
plot(dat$Timestamp, dat$priemer, type="l", col="lightblue", xlab="", ylab="", lwd=2)
par(new=TRUE)
plot(dat$Timestamp, dat$Confirmed, type="l", col="orange", yaxt = "n",xlab="Timestamp", ylab="Cases", lwd=2)
par(new=TRUE)
plot(grid1$Timestamp[grid1$Timestamp>= "2020-01-31"], grid1$pred, type="l", xlab="", ylab="", yaxt = "n", col = "blue", yaxt="n")
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "darkgreen", yaxt = "n")
axis(side=4)
title("Correlation between cases and polution")
legend("top", legend=c("Polution in India", "Confirmed cases"), col=c("lightblue", "orange"), lty=1)
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(patchwork)))
dat <- merge(covid, air_quality, all= TRUE)
dat$Timestamp <- as.Date(with(dat, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
dat <- select(dat, c(Timestamp, Confirmed, priemer))
plot(dat$Timestamp, dat$priemer, type="l", col="lightblue", xlab="", ylab="", lwd=2)
par(new=TRUE)
plot(dat$Timestamp, dat$Confirmed, type="l", col="orange", yaxt = "n",xlab="Timestamp", ylab="Cases", lwd=2)
par(new=TRUE)
plot(grid1$Timestamp, grid1$pred, type="l", xlab="", ylab="", yaxt = "n", col = "blue", yaxt="n")
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "darkgreen", yaxt = "n")
axis(side=4)
title("Correlation between cases and polution")
legend("top", legend=c("Polution in India", "Confirmed cases"), col=c("lightblue", "orange"), lty=1)
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(patchwork)))
dat <- merge(covid, air_quality, all= TRUE)
dat$Timestamp <- as.Date(with(dat, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
dat <- select(dat, c(Timestamp, Confirmed, priemer))
plot(dat$Timestamp, dat$priemer, type="l", col="lightblue", xlab="", ylab="", lwd=2)
par(new=TRUE)
plot(dat$Timestamp, dat$Confirmed, type="l", col="orange", yaxt = "n",xlab="Timestamp", ylab="Cases", lwd=2)
par(new=TRUE)
plot(grid1$Timestamp, grid1$pred, type="l", xlab="", ylab="", yaxt = "n",xaxt = "n", col = "blue")
par(new=TRUE)
plot(grid$Timestamp, grid$pred, type="l", xlab="", ylab="", yaxt = "n", col = "darkgreen")
axis(side=4)
title("Correlation between cases and polution")
legend("top", legend=c("Polution in India", "Confirmed cases"), col=c("lightblue", "orange"), lty=1)
bubblesort(lst)
bubblesort <- function(x){
for (i in 1: (length(x)-1)){
for (j in 1: i){
if (x[i] > x[i + 1]) {
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
}
}
}
return(x)
}
bubblesort(lst)
#' # Príklad 2
#'
#' **Zadanie:** Zvoľte si jednoduchú úlohu, ktorú ste riešili na predmete Programovanie v jazyku C (alebo inom) a implementujte ju v prostredí R, jednak ako kompilovateľný kód jazyka C, jednak interpretovateľný kód jazyka R (a overte funkčnosť na konkrétnom výpočte). Ak sa dá, navrhnite príklad riešenia tak, aby bol vidieť rozdiel medzi nimi v rýchlosti vykonania.
#'
#' **Riešenie:**
#'
lst = c(1,9,6,8,5,7,4,2,3)
bubblesort(lst)
for (j in 1:  (length(x)-1)){
if (x[i] > x[i + 1]) {
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
}
}
bubblesort <- function(x){
for (i in 1: (length(x)-1)){
for (j in 1:  (length(x)-1)){
if (x[i] > x[i + 1]) {
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
}
}
}
return(x)
}
bubblesort(lst)
cat("current state: ", x, "\n")
bubblesort(lst)
bubblesort <- function(x){
for (i in 1: (length(x)-1)){
for (j in 1:  (length(x)-1)){
if (x[i] > x[i + 1]) {
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
cat("current state: ", x, "\n")
}
}
}
return(x)
}
bubblesort(lst)
x[j] <- tmp
#' # Príklad 2
#'
#' **Zadanie:** Zvoľte si jednoduchú úlohu, ktorú ste riešili na predmete Programovanie v jazyku C (alebo inom) a implementujte ju v prostredí R, jednak ako kompilovateľný kód jazyka C, jednak interpretovateľný kód jazyka R (a overte funkčnosť na konkrétnom výpočte). Ak sa dá, navrhnite príklad riešenia tak, aby bol vidieť rozdiel medzi nimi v rýchlosti vykonania.
#'
#' **Riešenie:**
#'
bubblesort <- function(x){
for (i in 1: (length(x)-1)){
for (j in 1:  (length(x)-1)){
if (x[i] > x[j]) {
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
cat("current state: ", x, "\n")
}
}
}
return(x)
}
bubblesort(lst)
for (i in 1: (length(x))){
for (j in 1:  (length(x))){
if (x[i] > x[j]) {
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
cat("current state: ", x, "\n")
}
}
}
#' # Príklad 2
#'
#' **Zadanie:** Zvoľte si jednoduchú úlohu, ktorú ste riešili na predmete Programovanie v jazyku C (alebo inom) a implementujte ju v prostredí R, jednak ako kompilovateľný kód jazyka C, jednak interpretovateľný kód jazyka R (a overte funkčnosť na konkrétnom výpočte). Ak sa dá, navrhnite príklad riešenia tak, aby bol vidieť rozdiel medzi nimi v rýchlosti vykonania.
#'
#' **Riešenie:**
#'
bubblesort <- function(x){
for (i in 1: (length(x))){
for (j in 1:  (length(x))){
if (x[i] > x[j]) {
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
cat("current state: ", x, "\n")
}
}
}
return(x)
}
bubblesort(lst)
if (x[i] < x[j]) {
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
cat("current state: ", x, "\n")
}
#' # Príklad 2
#'
#' **Zadanie:** Zvoľte si jednoduchú úlohu, ktorú ste riešili na predmete Programovanie v jazyku C (alebo inom) a implementujte ju v prostredí R, jednak ako kompilovateľný kód jazyka C, jednak interpretovateľný kód jazyka R (a overte funkčnosť na konkrétnom výpočte). Ak sa dá, navrhnite príklad riešenia tak, aby bol vidieť rozdiel medzi nimi v rýchlosti vykonania.
#'
#' **Riešenie:**
#'
bubblesort <- function(x){
for (i in 1: (length(x))){
for (j in 1:  (length(x))){
if (x[i] < x[j]) {
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
cat("current state: ", x, "\n")
}
}
}
return(x)
}
bubblesort(lst)
#' # Príklad 2
#'
#' **Zadanie:** Zvoľte si jednoduchú úlohu, ktorú ste riešili na predmete Programovanie v jazyku C (alebo inom) a implementujte ju v prostredí R, jednak ako kompilovateľný kód jazyka C, jednak interpretovateľný kód jazyka R (a overte funkčnosť na konkrétnom výpočte). Ak sa dá, navrhnite príklad riešenia tak, aby bol vidieť rozdiel medzi nimi v rýchlosti vykonania.
#'
#' **Riešenie:**
#'
bubblesort <- function(x){
for (i in 1: (length(x))){
for (j in 1:  (length(x))){
if (x[i] < x[j]) {
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
}
}
}
return(x)
}
system.time(bubblesort(lst))
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
double xi;
for(int i = 0; i <= n-2; ++i) {
for(int j = i+1; j <= n-1; ++j) {
xi = x[i];
if (x[j] < xi) {
x[i] = x[j];
x[j] = xi;
}
}
}
return x;
}')
library(Rcpp)
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
double xi;
for(int i = 0; i <= n-2; ++i) {
for(int j = i+1; j <= n-1; ++j) {
xi = x[i];
if (x[j] < xi) {
x[i] = x[j];
x[j] = xi;
}
}
}
return x;
}')
system.time(sort_C(lst))
#' # Príklad 3
#'
#' **Zadanie:** Priemernú hodnotu dojazdu automobilov z datasetu mtcars vypočítajte súbežne (paralelne) podľa počtu valcov.
#'
#' **Riešenie:**
#'
library(parallel)
mod1 = lm(mpg ~ disp, data = dat)
dat <- datasets::mtcars;
mod1 = lm(mpg ~ disp, data = dat)
grid <- dat %>%
modelr::data_grid(mpg, disp, cyl) %>%
modelr::add_predictions(mod1)
grid <- dat |>
modelr::data_grid(mpg, disp, cyl) %>%
modelr::add_predictions(mod1)
grid <- dat |>
modelr::data_grid(mpg, disp, cyl) |>
modelr::add_predictions(mod1)
ggplot(dat) + aes(mpg,disp) +
geom_point(aes(y=disp)) +
geom_line(data = grid, aes(x=pred), color = 4)
grid$pred
system.time(sort_C(lst))
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
double xi;
for(int i = 0; i <= n-2; ++i) {
for(int j = i+1; j <= n-1; ++j) {
xi = x[i];
if (x[j] < xi) {
x[i] = x[j];
x[j] = xi;
}
}
}
return x;
}')
system.time(sort_C(lst))
system.time(sort_C(lst))
system.time(sort_C(lst))
grid$pred
plot(mpg ~ disp, data = dat)
dat <- datasets::mtcars;
View(dat)
plot(mpg ~ disp ~ cyl, data = dat)
plot3D(mpg ~ disp ~ cyl, data = dat)
cas <- mcapply(mat_list, sort_for, mc.cores=3)
cas <- mclapply(mat_list, sort_for, mc.cores=3)
cas <- mclapply(mat_list, sort_for, mc.cores="3")
cas <- mclapply(mat_list, sort_for, mc.cores=1)
cas <- mclapply(mat_list, mean,  mc.cores=1)
mat_list <- split(mpg, cyl)
mat_list <- split(mpg, cyl, data=dat)
mat_list <- split(dat$mpg, dat$cyl)
cas <- mclapply(mat_list, mean,  mc.cores=1)
detectCores()
View(cas)
View(mat_list)
View(mat_list)
View(cas)
View(mat_list)
cas <- mclapply(mat_list, mean(),  mc.cores=1)
cas <- mclapply(mat_list, mean(mat_list),  mc.cores=1)
cas <- lapply(mat_list, mean,  mc.cores=1)
priemery <- lapply(mat_list, mean,  mc.cores=2)
print(priemery)
priemery <- lapply(mat_list, mean,  mc.cores=2)
(parallel)
ibrary(parallel)
#' # Príklad 3
#'
#' **Zadanie:** Priemernú hodnotu dojazdu automobilov z datasetu mtcars vypočítajte súbežne (paralelne) podľa počtu valcov.
#'
#' **Riešenie:**
#'
library(parallel)
dat <- datasets::mtcars;
mat_list <- split(dat$mpg, dat$cyl)
priemery <- lapply(mat_list, mean,  mc.cores=2)
print(priemery)
print(priemery, end="")
priemery <- lapply(split(dat$mpg, dat$cyl), mean,  mc.cores=2)
dat <- datasets::mtcars;
priemery <- lapply(split(dat$mpg, dat$cyl), mean,  mc.cores=2)
priemery <- lapply(split(dat$disp, dat$cyl), mean,  mc.cores=2)
priemery <- lapply(split(dat$mpg, dat$cyl), mean,  mc.cores=2)
system.time(sort_C(lst))
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
double xi;
for(int i = 0; i <= n-2; ++i) {
for(int j = i+1; j <= n-1; ++j) {
xi = x[i];
if (x[j] < xi) {
x[i] = x[j];
x[j] = xi;
}
}
}
return x;
}')
system.time(sort_C(lst))
lst = c(1,9,6,8,5,7,4,2,3)
system.time(sort_C(lst))
View(sort_C)
#' # Príklad 2
#'
#' **Zadanie:** Zvoľte si jednoduchú úlohu, ktorú ste riešili na predmete Programovanie v jazyku C (alebo inom) a implementujte ju v prostredí R, jednak ako kompilovateľný kód jazyka C, jednak interpretovateľný kód jazyka R (a overte funkčnosť na konkrétnom výpočte). Ak sa dá, navrhnite príklad riešenia tak, aby bol vidieť rozdiel medzi nimi v rýchlosti vykonania.
#'
#' **Riešenie:**
#'
bubblesort <- function(x){
for (i in 1: (length(x))){
for (j in 1:  (length(x))){
if (x[i] < x[j]) {
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
}
}
}
return(x)
}
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
double xi;
for(int i = 0; i < n; ++i) {
for(int j = 0; j < n; ++j) {
if (x[j] < xi) {
temp = x[i];
x[i] = x[j];
x[j] = temp;
}
}
}
return x;
}')
library(Rcpp)
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
double xi;
for(int i = 0; i < n; ++i) {
for(int j = 0; j < n; ++j) {
if (x[j] < xi) {
temp = x[i];
x[i] = x[j];
x[j] = temp;
}
}
}
return x;
}')
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
double xi;
for(int i = 0; i < n; ++i) {
for(int j = 0; j < n; ++j) {
if (x[j] < xi) {
temp = x[i];
x[i] = x[j];
x[j] = temp;
}
}
}
return x;
}')
cppFunction('NumericVector sort_C(NumericVector x) {
int n = x.size();
int temp;
double xi;
for(int i = 0; i < n; ++i) {
for(int j = 0; j < n; ++j) {
if (x[j] < xi) {
temp = x[i];
x[i] = x[j];
x[j] = temp;
}
}
}
return x;
}')
system.time(sort_C(lst))
reticulate::repl_python()
import numpy as np
reticulate::repl_python()
print(np.linalg.solve(a=((2,3),(-1, 1)), b = (0,1)))
y
reticulate::repl_python()
print(np.linalg.solve(a=((2,3),(-1, 1)), b = (0,1)))
import numpy as np
reticulate::source_python('C:/Users/mares/Desktop/CODES/R/zadanie_10.py')
reticulate::source_python('C:/Users/mares/Desktop/CODES/R/zadanie_10.py')
quit
exponent <- 1/1:20
cislo <- seq(from = 2, length.out = 20, by=2)
sekvencia <- cislo^exponent
print(sum(sekvencia))
reticulate::repl_python()
library(reticulate)
import numpy as np
quit
library(reticulate)
```{python}
library(reticulate)
reticulate::repl_python()
import numpy as np
import numpy as np
import numpy as np
View(r)
import numpy as np
print(5)
q
q
install.packages("rmarkdown")
install.packages(c("askpass", "bslib", "classInt", "cpp11", "crosstalk", "curl", "cyclocomp", "data.table", "desc", "digest", "dplyr", "DT", "e1071", "evaluate", "fansi", "fontawesome", "fs", "ggplot2", "gtable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "knitr", "labeling", "languageserver", "later", "leaflet", "leaflet.providers", "lifecycle", "lintr", "lubridate", "markdown", "openssl", "packrat", "patchwork", "pkgload", "plotly", "prettyunits", "processx", "progress", "promises", "purrr", "quarto", "R.utils", "raster", "Rcpp", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "s2", "sass", "scales", "sf", "shiny", "sp", "stringi", "stringr", "styler", "terra", "tinytex", "units", "utf8", "vctrs", "viridis", "withr", "wk", "xfun", "xml2"))
rstudioapi::addTheme('https://raw.githubusercontent.com/johnnybarrels/rstudio-one-dark-pro-theme/master/OneDarkPro.rstheme', apply=TRUE, force=TRUE)
git clone https://github.com/Holikma/R.git
setwd("C:/Users/mares/Desktop/R")
